class Solution {
  private:
    int countSubsetsSum(vector<int>& arr,int S1,int n)
    {
        vector<vector<int>> dp(n+1,vector<int> (S1+1,0));
        
        for(int i=0;i<=n;i++)
        {
            dp[i][0] = 1;
        }
        
        
        for(int i=1;i<=n;i++)
        {
            for(int j=0;j<=S1;j++)
            {
                if(arr[i-1]<=j)
                dp[i][j] = dp[i-1][j-arr[i-1]] + dp[i-1][j];
                else
               dp[i][j] = dp[i-1][j];
            }
        }
        return dp[n][S1];
    }
  public:
    int countPartitions(vector<int>& arr, int d) {
        // Code here
        int n = arr.size();
        int sum=0;
        for(int i=0;i<n;i++)
        {
            sum = sum + arr[i];
        }
        
         if ((d > sum) || ((d + sum) % 2 != 0)) return 0;
         
        int S1 = (d + sum)/2;

        
        int ans = countSubsetsSum(arr,S1,n);
        return ans;
        
        
    }
};
