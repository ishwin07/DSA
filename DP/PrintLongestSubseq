#include <iostream>
#include <vector>
#include <string>
using namespace std;

class Solution {
public:
    string printLCS(string s1, string s2) {
        int n = s1.size();
        int m = s2.size();

        // dp[i][j] will store the LCS string of s1[0...i-1] and s2[0...j-1]
        vector<vector<string>> dp(n+1, vector<string>(m+1, ""));

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (s1[i-1] == s2[j-1]) {
                    dp[i][j] = dp[i-1][j-1] + s1[i-1];
                } else {
                    // Choose the longer subsequence from top or left
                    dp[i][j] = dp[i-1][j].size() > dp[i][j-1].size() ? dp[i-1][j] : dp[i][j-1];
                }
            }
        }

        // The cell dp[n][m] contains the longest common subsequence
        return dp[n][m];
    }
};

int main() {
    Solution sol;
    string s1 = "abcde";
    string s2 = "ace";
    string lcs = sol.printLCS(s1, s2);
    
    cout << "Longest Common Subsequence: " << lcs << endl;
    return 0;
}
