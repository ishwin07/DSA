class Solution {
  public:
    static int t[1002][1002];
    
    // Solution()
    // {
    //     memset(t,-1,sizeof(t));
    // }
    
    int knapsackHelper(int W,vector<int> &val,vector<int> &wt,int n)
    {
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=W;j++)
            {
                if(i==0 || j==0)
                t[i][j] = 0;
            }
        }
        
        // if(t[n][W]!=-1)
        // return t[n][W];
        for(int i=1;i<=n;i++)
        {
            for(int j=0;j<=W;j++)
            {
                if(wt[i-1]<=j)
                {
                    t[i][j] = max(val[i-1]+t[i-1][j-wt[i-1]],t[i-1][j]);
                }
                else
                {
                    t[i][j] = t[i-1][j];
                }
            }
        }
       
        return t[n][W];
    }
    
    
    int knapsack(int W, vector<int> &val, vector<int> &wt) {
        // code here
        int n = wt.size();
        return knapsackHelper(W,val,wt,n);
        
    }
};

int Solution :: t[1002][1002];
