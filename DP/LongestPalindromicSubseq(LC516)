class Solution {
private:
    int helperFun(string s,string ns)
    {
        int n = s.length();
        int m = ns.length();

        vector<vector<int>> dp(n+1,vector<int> (m+1,0));

        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<m+1;j++)
            {
                if(s[i-1] == ns[j-1])
                dp[i][j] = 1+dp[i-1][j-1];
                else
                dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
            }
        }

        return dp[n][m];
    }
public:
    int longestPalindromeSubseq(string s) {

        string ns = s;
        reverse(ns.begin(),ns.end());

        int ans = helperFun(s,ns);

        return ans;
    }
};
