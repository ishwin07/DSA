class Solution {
private:
    bool checkBipartite(int start,vector<vector<int>>& graph,vector<int> &col) 
    {
        int n = graph.size();
        queue<int> q;
        q.push(start);
        col[start]=0;

        while(!q.empty())
        {
            int node = q.front();
            q.pop();
            for(auto it : graph[node])
            {
                if(col[it]==-1)
                {
                    q.push(it);
                    col[it]=!col[node];
                }

                else if(col[it]!=-1)
                {
                    if(col[it]==col[node])
                    return false;
                }
            }
        }
        return true;
    }
public:
    bool isBipartite(vector<vector<int>>& graph) {
        int n = graph.size();
        vector<int> col(n,-1);
        for(int i=0;i<n;i++)
        {
            if(col[i]==-1)
            {
                if(checkBipartite(i,graph,col)==false) return false;
            }
        }
        return true;

        

    }
};
