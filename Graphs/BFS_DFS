class Solution {
  private:
      void dfs(int node,vector<int> adj[],vector<int> &vis,vector<int> &result)
      {
        vis[node]=1;
        result.push_back(node);

        for(auto it: adj[node])
        {
          if(!vis[it])
          dfs(it,adj,vis,result);
        }
      }
  public:
    vector<int> dfsOfGraph(int V, vector<int> adj[]) {
        vector<int> vis(V,0);
        vector<int> result;

        dfs(0,adj,vis,result);

        return result;
    }
    
    vector<int> bfsOfGraph(int V, vector<int> adj[]) {
        queue<int> q;
        vector<int> vis(V,0);
        vector<int> bfs;

        q.push(0);
        vis[0]=1;
       

        while(!q.empty())
        {
          int node = q.front();
          bfs.push_back(node);
          q.pop();

          for(auto it: adj[node])
          {
            if(!vis[it])
            {
              q.push(it);
              vis[it]=1;
            }
          }
        }
        return bfs;
    }
};
